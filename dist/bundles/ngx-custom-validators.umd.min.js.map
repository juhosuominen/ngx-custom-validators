{"version":3,"sources":["../../src/app/util/lang.ts","../../src/app/array-length/validator.ts","../../src/app/array-length/directive.ts","../../src/app/base64/validator.ts","../../src/app/base64/directive.ts","../../src/app/credit-card/validator.ts","../../src/app/credit-card/directive.ts","../../src/app/date-iso/validator.ts","../../src/app/date-iso/directive.ts","../../src/app/date/validator.ts","../../src/app/date/directive.ts","../../src/app/digits/validator.ts","../../src/app/digits/directive.ts","../../src/app/email/validator.ts","../../src/app/email/directive.ts","../../src/app/equal-to/validator.ts","../../src/app/equal-to/directive.ts","../../src/app/equal/validator.ts","../../src/app/equal/directive.ts","../../src/app/greater-than-equal/validator.ts","../../src/app/greater-than-equal/directive.ts","../../src/app/greater-than/validator.ts","../../src/app/greater-than/directive.ts","../../src/app/json/validator.ts","../../src/app/json/directive.ts","../../src/app/less-than-equal/validator.ts","../../src/app/less-than-equal/directive.ts","../../src/app/less-than/validator.ts","../../src/app/less-than/directive.ts","../../src/app/max-date/validator.ts","../../src/app/max-date/directive.ts","../../src/app/max/validator.ts","../../src/app/max/directive.ts","../../src/app/min-date/validator.ts","../../src/app/min-date/directive.ts","../../src/app/min/validator.ts","../../src/app/min/directive.ts","../../src/app/not-equal-to/validator.ts","../../src/app/not-equal-to/directive.ts","../../src/app/not-equal/validator.ts","../../src/app/not-equal/directive.ts","../../src/app/number/validator.ts","../../src/app/number/directive.ts","../../node_modules/tslib/tslib.es6.js","../../src/app/property/validator.ts","../../src/app/property/directive.ts","../../src/app/range-length/validator.ts","../../src/app/range-length/directive.ts","../../src/app/range/validator.ts","../../src/app/range/directive.ts","../../src/app/url/validator.ts","../../src/app/url/directive.ts","../../src/app/uuid/validator.ts","../../src/app/uuid/directive.ts","../../src/app/custom-forms.module.ts"],"names":["isPresent","obj","isDate","date","Date","isNaN","getTime","e","parseDate","_d","d","month","getMonth","day","getDate","getFullYear","formatDayOrMonth","year","arrayLength","value","control","Validators","required","Array","isArray","length","minLength","ARRAY_LENGTH_VALIDATOR","provide","NG_VALIDATORS","useExisting","forwardRef","ArrayLengthValidator","multi","prototype","ngOnInit","this","validator","ngOnChanges","changes","key","currentValue","onChange","validate","c","registerOnValidatorChange","fn","Directive","args","selector","providers","Input","base64","v","test","BASE64_VALIDATOR","Base64Validator","creditCard","sanitized","replace","digit","tmpNum","shouldDouble","sum","i","substring","parseInt","Boolean","CREDIT_CARD_VALIDATOR","CreditCardValidator","dateISO","DATE_ISO_VALIDATOR","DateISOValidator","DATE_VALIDATOR","DateValidator","digits","DIGITS_VALIDATOR","DigitsValidator","email","EMAIL_VALIDATOR","EmailValidator","equalTo","equalControl","subscribe","valueChanges","updateValueAndValidity","EQUAL_TO_VALIDATOR","EqualToValidator","equal","val","EQUAL_VALIDATOR","EqualValidator","gte","GREATER_THAN_EQUAL_VALIDATOR","GreaterThanEqualValidator","gt","GREATER_THAN_VALIDATOR","GreaterThanValidator","json","JSON","parse","JSON_VALIDATOR","JSONValidator","lte","LESS_THAN_EQUAL_VALIDATOR","LessThanEqualValidator","lt","LESS_THAN_VALIDATOR","LessThanValidator","maxDate","maxInput","maxValue","isForm","FormControl","NgModel","Function","error","Error","undefined","MAX_DATE_VALIDATOR","MaxDateValidator","max","MAX_VALIDATOR","MaxValidator","minDate","minInput","minValue","MIN_DATE_VALIDATOR","MinDateValidator","min","MIN_VALIDATOR","MinValidator","notEqualTo","notEqualControl","NOT_EQUAL_TO_VALIDATOR","NotEqualToValidator","notEqual","NOT_EQUAL_VALIDATOR","NotEqualValidator","number","NUMBER_VALIDATOR","NumberValidator","Object","create","__values","o","s","Symbol","iterator","m","call","next","done","TypeError","property","properties","split","isValid","properties_1","properties_1_1","hasProperty","PROPERTY_VALIDATOR","PropertyValidator","rangeLength","RANGE_LENGTH_VALIDATOR","RangeLengthValidator","range","RANGE_VALIDATOR","RangeValidator","url","URL_VALIDATOR","UrlValidator","uuids","3","4","5","all","uuid","version","RegExp","UUID_VALIDATOR","UUIDValidator","CustomValidators","CustomDirectives","NgModule","declarations","exports"],"mappings":"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","sourcesContent":["export function isPresent(obj: any): boolean {\n  return obj !== undefined && obj !== null;\n}\n\nexport function isDate(obj: any): boolean {\n  try {\n    const date = new Date(obj);\n    return !isNaN(date.getTime());\n  } catch (e) {\n    return false;\n  }\n}\n\nexport function parseDate(obj: any): string {\n  try {\n    // Moment.js\n    if (obj._d instanceof Date) {\n      const d = obj._d as Date;\n      const month = +d.getMonth() + 1;\n      const day = +d.getDate();\n      return `${d.getFullYear()}-${formatDayOrMonth(month)}-${formatDayOrMonth(day)}`;\n    }\n\n    // NgbDateStruct\n    if (typeof obj === 'object' && obj.year != null && obj.month != null && obj.day != null) {\n      const month = +obj.month;\n      const day = +obj.day;\n      return `${obj.year}-${formatDayOrMonth(month)}-${formatDayOrMonth(day)}`;\n    }\n  } catch (e) { }\n  return obj;\n}\n\nfunction formatDayOrMonth(month: number): string|number {\n  return month < 10 ? `0${month}` : month;\n}\n","import { AbstractControl, ValidationErrors, ValidatorFn, Validators } from '@angular/forms';\nimport { isPresent } from '../util/lang';\n\nexport const arrayLength = (value: number): ValidatorFn => {\n  return (control: AbstractControl): ValidationErrors => {\n\n    if (isPresent(Validators.required(control))) {\n      return null;\n    }\n\n    const obj = control.value;\n    return Array.isArray(obj) && obj.length >= +value ? null : { arrayLength: { minLength: value } };\n  };\n};\n","import { Directive, Input, forwardRef, OnInit, OnChanges, SimpleChanges } from '@angular/core';\nimport { NG_VALIDATORS, Validator, ValidatorFn, AbstractControl } from '@angular/forms';\n\nimport { arrayLength } from './validator';\n\nconst ARRAY_LENGTH_VALIDATOR: any = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => ArrayLengthValidator),\n  multi: true\n};\n\n@Directive({\n  selector: '[arrayLength][formControlName],[arrayLength][formControl],[arrayLength][ngModel]',\n  providers: [ARRAY_LENGTH_VALIDATOR]\n})\nexport class ArrayLengthValidator implements Validator, OnInit, OnChanges {\n  @Input() arrayLength: number;\n\n  private validator: ValidatorFn;\n  private onChange: () => void;\n\n  ngOnInit() {\n    this.validator = arrayLength(this.arrayLength);\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    for (const key in changes) {\n      if (key === 'arrayLength') {\n        this.validator = arrayLength(changes[key].currentValue);\n        if (this.onChange) {\n          this.onChange();\n        }\n      }\n    }\n  }\n\n  validate(c: AbstractControl): {[key: string]: any} {\n    return this.validator(c);\n  }\n\n  registerOnValidatorChange(fn: () => void): void {\n    this.onChange = fn;\n  }\n}\n","import { AbstractControl, ValidationErrors, ValidatorFn, Validators } from '@angular/forms';\nimport { isPresent } from '../util/lang';\n\nexport const base64: ValidatorFn = (control: AbstractControl): ValidationErrors => {\n  if (isPresent(Validators.required(control))) {\n    return null;\n  }\n\n  const v: string = control.value;\n  return /^(?:[A-Z0-9+\\/]{4})*(?:[A-Z0-9+\\/]{2}==|[A-Z0-9+\\/]{3}=|[A-Z0-9+\\/]{4})$/i.test(v) ? null : { base64: true };\n};\n","import { Directive, forwardRef } from '@angular/core';\nimport { NG_VALIDATORS, Validator, AbstractControl } from '@angular/forms';\n\nimport { base64 } from './validator';\n\nconst BASE64_VALIDATOR: any = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => Base64Validator),\n  multi: true\n};\n\n@Directive({\n  selector: '[base64][formControlName],[base64][formControl],[base64][ngModel]',\n  providers: [BASE64_VALIDATOR]\n})\nexport class Base64Validator implements Validator {\n  validate(c: AbstractControl): {[key: string]: any} {\n    return base64(c);\n  }\n}\n","import { AbstractControl, ValidationErrors, ValidatorFn, Validators } from '@angular/forms';\nimport { isPresent } from '../util/lang';\n\nexport const creditCard: ValidatorFn = (control: AbstractControl): ValidationErrors => {\n  if (isPresent(Validators.required(control))) {\n    return null;\n  }\n\n  const v: string = control.value;\n\n  const sanitized = v.replace(/[^0-9]+/g, '');\n\n  // problem with chrome\n  /* tslint:disable */\n  if (!(/^(?:4[0-9]{12}(?:[0-9]{3})?|5[1-5][0-9]{14}|6(?:011|5[0-9][0-9])[0-9]{12}|3[47][0-9]{13}|3(?:0[0-5]|[68][0-9])[0-9]{11}|(?:2131|1800|35\\d{3})\\d{11}|(?:9792)\\d{12})$/.test(sanitized))) {\n    return { creditCard: true };\n  }\n  /* tslint:enable */\n\n  let sum = 0;\n  let digit;\n  let tmpNum;\n  let shouldDouble;\n  for (let i = sanitized.length - 1; i >= 0; i--) {\n    digit = sanitized.substring(i, (i + 1));\n    tmpNum = parseInt(digit, 10);\n    if (shouldDouble) {\n      tmpNum *= 2;\n      if (tmpNum >= 10) {\n        sum += ((tmpNum % 10) + 1);\n      } else {\n        sum += tmpNum;\n      }\n    } else {\n      sum += tmpNum;\n    }\n    shouldDouble = !shouldDouble;\n  }\n\n  if (Boolean((sum % 10) === 0 ? sanitized : false)) {\n    return null;\n  }\n\n  return { creditCard: true };\n};\n","import { Directive, forwardRef } from '@angular/core';\nimport { NG_VALIDATORS, Validator, AbstractControl } from '@angular/forms';\n\nimport { creditCard } from './validator';\n\nconst CREDIT_CARD_VALIDATOR: any = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => CreditCardValidator),\n  multi: true\n};\n\n@Directive({\n  selector: '[creditCard][formControlName],[creditCard][formControl],[creditCard][ngModel]',\n  providers: [CREDIT_CARD_VALIDATOR]\n})\nexport class CreditCardValidator implements Validator {\n  validate(c: AbstractControl): {[key: string]: any} {\n    return creditCard(c);\n  }\n}\n","import { AbstractControl, ValidationErrors, ValidatorFn, Validators } from '@angular/forms';\nimport { isPresent } from '../util/lang';\n\nexport const dateISO: ValidatorFn = (control: AbstractControl): ValidationErrors => {\n  if (isPresent(Validators.required(control))) {\n    return null;\n  }\n\n  const v: string = control.value;\n  return /^\\d{4}[\\/\\-](0?[1-9]|1[012])[\\/\\-](0?[1-9]|[12][0-9]|3[01])$/.test(v) ? null : { dateISO: true };\n};\n","import { Directive, forwardRef } from '@angular/core';\nimport { NG_VALIDATORS, Validator, AbstractControl } from '@angular/forms';\n\nimport { dateISO } from './validator';\n\nconst DATE_ISO_VALIDATOR: any = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => DateISOValidator),\n  multi: true\n};\n\n@Directive({\n  selector: '[dateISO][formControlName],[dateISO][formControl],[dateISO][ngModel]',\n  providers: [DATE_ISO_VALIDATOR]\n})\nexport class DateISOValidator implements Validator {\n  validate(c: AbstractControl): {[key: string]: any} {\n    return dateISO(c);\n  }\n}\n","import { AbstractControl, ValidationErrors, ValidatorFn, Validators } from '@angular/forms';\nimport { isDate, isPresent, parseDate } from '../util/lang';\n\nexport const date: ValidatorFn = (control: AbstractControl): ValidationErrors => {\n  if (isPresent(Validators.required(control))) {\n    return null;\n  }\n\n  let v: string = control.value;\n  v = parseDate(v);\n  return isDate(v) ? null : { date: true };\n};\n","import { Directive, forwardRef } from '@angular/core';\nimport { NG_VALIDATORS, Validator, AbstractControl } from '@angular/forms';\n\nimport { date } from './validator';\n\nconst DATE_VALIDATOR: any = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => DateValidator),\n  multi: true\n};\n\n@Directive({\n  selector: '[date][formControlName],[date][formControl],[date][ngModel]',\n  providers: [DATE_VALIDATOR]\n})\nexport class DateValidator implements Validator {\n  validate(c: AbstractControl): {[key: string]: any} {\n    return date(c);\n  }\n}\n","import { AbstractControl, ValidationErrors, ValidatorFn, Validators } from '@angular/forms';\nimport { isPresent } from '../util/lang';\n\nexport const digits: ValidatorFn = (control: AbstractControl): ValidationErrors => {\n  if (isPresent(Validators.required(control))) {\n    return null;\n  }\n\n  const v: string = control.value;\n  return /^\\d+$/.test(v) ? null : { digits: true };\n};\n","import { Directive, forwardRef } from '@angular/core';\nimport { NG_VALIDATORS, Validator, AbstractControl } from '@angular/forms';\n\nimport { digits } from './validator';\n\nconst DIGITS_VALIDATOR: any = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => DigitsValidator),\n  multi: true\n};\n\n@Directive({\n  selector: '[digits][formControlName],[digits][formControl],[digits][ngModel]',\n  providers: [DIGITS_VALIDATOR]\n})\nexport class DigitsValidator implements Validator {\n  validate(c: AbstractControl): {[key: string]: any} {\n    return digits(c);\n  }\n}\n","import { AbstractControl, ValidationErrors, ValidatorFn, Validators } from '@angular/forms';\nimport { isPresent } from '../util/lang';\n\nexport const email: ValidatorFn = (control: AbstractControl): ValidationErrors => {\n  if (isPresent(Validators.required(control))) {\n    return null;\n  }\n\n  const v: string = control.value;\n  /* tslint:disable */\n  return /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/.test(v) ? null : { 'email': true };\n  /* tslint:enable */\n};\n","import { Directive, forwardRef } from '@angular/core';\nimport { NG_VALIDATORS, Validator, AbstractControl } from '@angular/forms';\n\nimport { email } from './validator';\n\nconst EMAIL_VALIDATOR: any = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => EmailValidator),\n  multi: true\n};\n\n@Directive({\n  selector: '[ngvemail][formControlName],[ngvemail][formControl],[ngvemail][ngModel]',\n  providers: [EMAIL_VALIDATOR]\n})\nexport class EmailValidator implements Validator {\n  validate(c: AbstractControl): {[key: string]: any} {\n    return email(c);\n  }\n}\n","import { AbstractControl, ValidationErrors, ValidatorFn } from '@angular/forms';\n\nexport const equalTo = (equalControl: AbstractControl): ValidatorFn => {\n  let subscribe = false;\n\n  return (control: AbstractControl): ValidationErrors => {\n    if (!subscribe) {\n      subscribe = true;\n      equalControl.valueChanges.subscribe(() => {\n        control.updateValueAndValidity();\n      });\n    }\n\n    const v: string = control.value;\n\n    return equalControl.value === v ? null : { equalTo: { control: equalControl, value: equalControl.value } };\n  };\n};\n","import { Directive, Input, forwardRef, OnInit } from '@angular/core';\nimport { NG_VALIDATORS, Validator, FormControl, ValidatorFn, AbstractControl } from '@angular/forms';\n\nimport { equalTo } from './validator';\n\nconst EQUAL_TO_VALIDATOR: any = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => EqualToValidator),\n  multi: true\n};\n\n@Directive({\n  selector: '[equalTo][formControlName],[equalTo][formControl],[equalTo][ngModel]',\n  providers: [EQUAL_TO_VALIDATOR]\n})\nexport class EqualToValidator implements Validator, OnInit {\n  @Input() equalTo: FormControl;\n\n  private validator: ValidatorFn;\n\n  ngOnInit() {\n    this.validator = equalTo(this.equalTo);\n  }\n\n  validate(c: AbstractControl): {[key: string]: any} {\n    return this.validator(c);\n  }\n}\n","import { AbstractControl, ValidationErrors, ValidatorFn, Validators } from '@angular/forms';\nimport { isPresent } from '../util/lang';\n\nexport const equal = (val: any): ValidatorFn => {\n  return (control: AbstractControl): ValidationErrors => {\n    if (isPresent(Validators.required(control))) {\n      return null;\n    }\n\n    const v: any = control.value;\n\n    return val === v ? null : { equal: { value: val } };\n  };\n};\n","import { Directive, Input, forwardRef, OnInit, SimpleChanges, OnChanges } from '@angular/core';\nimport { NG_VALIDATORS, Validator, ValidatorFn, AbstractControl } from '@angular/forms';\n\nimport { equal } from './validator';\n\nconst EQUAL_VALIDATOR: any = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => EqualValidator),\n  multi: true\n};\n\n@Directive({\n  selector: '[equal][formControlName],[equal][formControl],[equal][ngModel]',\n  providers: [EQUAL_VALIDATOR]\n})\nexport class EqualValidator implements Validator, OnInit, OnChanges {\n  @Input() equal: any;\n\n  private validator: ValidatorFn;\n  private onChange: () => void;\n\n  ngOnInit() {\n    this.validator = equal(this.equal);\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    for (const key in changes) {\n      if (key === 'equal') {\n        this.validator = equal(changes[key].currentValue);\n        if (this.onChange) {\n          this.onChange();\n        }\n      }\n    }\n  }\n\n  validate(c: AbstractControl): {[key: string]: any} {\n    return this.validator(c);\n  }\n\n  registerOnValidatorChange(fn: () => void): void {\n    this.onChange = fn;\n  }\n}\n","import { AbstractControl, ValidationErrors, ValidatorFn, Validators } from '@angular/forms';\nimport { isPresent } from '../util/lang';\n\nexport const gte = (value: number): ValidatorFn => {\n  return (control: AbstractControl): ValidationErrors => {\n    if (!isPresent(value)) {\n      return null;\n    }\n    if (isPresent(Validators.required(control))) {\n      return null;\n    }\n\n    const v: number = +control.value;\n    return v >= +value ? null : { gte: { value: value } };\n  };\n};\n","import { Directive, Input, forwardRef, OnInit, OnChanges, SimpleChanges } from '@angular/core';\nimport { NG_VALIDATORS, Validator, ValidatorFn, AbstractControl } from '@angular/forms';\n\nimport { gte } from './validator';\n\nconst GREATER_THAN_EQUAL_VALIDATOR: any = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => GreaterThanEqualValidator),\n  multi: true\n};\n\n@Directive({\n  selector: '[gte][formControlName],[gte][formControl],[gte][ngModel]',\n  providers: [GREATER_THAN_EQUAL_VALIDATOR]\n})\nexport class GreaterThanEqualValidator implements Validator, OnInit, OnChanges {\n  @Input() gte: number;\n\n  private validator: ValidatorFn;\n  private onChange: () => void;\n\n  ngOnInit() {\n    this.validator = gte(this.gte);\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    for (const key in changes) {\n      if (key === 'gte') {\n        this.validator = gte(changes[key].currentValue);\n        if (this.onChange) {\n          this.onChange();\n        }\n      }\n    }\n  }\n\n  validate(c: AbstractControl): {[key: string]: any} {\n    return this.validator(c);\n  }\n\n  registerOnValidatorChange(fn: () => void): void {\n    this.onChange = fn;\n  }\n}\n","import { AbstractControl, ValidationErrors, ValidatorFn, Validators } from '@angular/forms';\nimport { isPresent } from '../util/lang';\n\nexport const gt = (value: number): ValidatorFn => {\n  return (control: AbstractControl): ValidationErrors => {\n    if (!isPresent(value)) {\n      return null;\n    }\n    if (isPresent(Validators.required(control))) {\n      return null;\n    }\n\n    const v: number = +control.value;\n    return v > +value ? null : { gt: { value: value } };\n  };\n};\n","import { Directive, Input, forwardRef, OnInit, OnChanges, SimpleChanges } from '@angular/core';\nimport { NG_VALIDATORS, Validator, ValidatorFn, AbstractControl } from '@angular/forms';\n\nimport { gt } from './validator';\n\nconst GREATER_THAN_VALIDATOR: any = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => GreaterThanValidator),\n  multi: true\n};\n\n@Directive({\n  selector: '[gt][formControlName],[gt][formControl],[gt][ngModel]',\n  providers: [GREATER_THAN_VALIDATOR]\n})\nexport class GreaterThanValidator implements Validator, OnInit, OnChanges {\n  @Input() gt: number;\n\n  private validator: ValidatorFn;\n  private onChange: () => void;\n\n  ngOnInit() {\n    this.validator = gt(this.gt);\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    for (const key in changes) {\n      if (key === 'gt') {\n        this.validator = gt(changes[key].currentValue);\n        if (this.onChange) {\n          this.onChange();\n        }\n      }\n    }\n  }\n\n  validate(c: AbstractControl): {[key: string]: any} {\n    return this.validator(c);\n  }\n\n  registerOnValidatorChange(fn: () => void): void {\n    this.onChange = fn;\n  }\n}\n","import { AbstractControl, ValidationErrors, ValidatorFn, Validators } from '@angular/forms';\nimport { isPresent } from '../util/lang';\n\nexport const json: ValidatorFn = (control: AbstractControl): ValidationErrors => {\n  if (isPresent(Validators.required(control))) {\n    return null;\n  }\n\n  const v: string = control.value;\n\n  try {\n    const obj = JSON.parse(v);\n\n    if (Boolean(obj) && typeof obj === 'object') {\n      return null;\n    }\n  } catch (e) { }\n  return { json: true };\n};\n","import { Directive, forwardRef } from '@angular/core';\nimport { NG_VALIDATORS, Validator, AbstractControl } from '@angular/forms';\n\nimport { json } from './validator';\n\nconst JSON_VALIDATOR: any = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => JSONValidator),\n  multi: true\n};\n\n@Directive({\n  selector: '[json][formControlName],[json][formControl],[json][ngModel]',\n  providers: [JSON_VALIDATOR]\n})\nexport class JSONValidator implements Validator {\n  validate(c: AbstractControl): {[key: string]: any} {\n    return json(c);\n  }\n}\n","import { AbstractControl, ValidationErrors, ValidatorFn, Validators } from '@angular/forms';\nimport { isPresent } from '../util/lang';\n\nexport const lte = (value: number): ValidatorFn => {\n  return (control: AbstractControl): ValidationErrors => {\n    if (!isPresent(value)) {\n      return null;\n    }\n    if (isPresent(Validators.required(control))) {\n      return null;\n    }\n\n    const v: number = +control.value;\n    return v <= +value ? null : { lte: { value: value } };\n  };\n};\n","import { Directive, Input, forwardRef, OnInit, OnChanges, SimpleChanges } from '@angular/core';\nimport { NG_VALIDATORS, Validator, ValidatorFn, AbstractControl } from '@angular/forms';\n\nimport { lte } from './validator';\n\nconst LESS_THAN_EQUAL_VALIDATOR: any = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => LessThanEqualValidator),\n  multi: true\n};\n\n@Directive({\n  selector: '[lte][formControlName],[lte][formControl],[lte][ngModel]',\n  providers: [LESS_THAN_EQUAL_VALIDATOR]\n})\nexport class LessThanEqualValidator implements Validator, OnInit, OnChanges {\n  @Input() lte: number;\n\n  private validator: ValidatorFn;\n  private onChange: () => void;\n\n  ngOnInit() {\n    this.validator = lte(this.lte);\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    for (const key in changes) {\n      if (key === 'lte') {\n        this.validator = lte(changes[key].currentValue);\n        if (this.onChange) {\n          this.onChange();\n        }\n      }\n    }\n  }\n\n  validate(c: AbstractControl): {[key: string]: any} {\n    return this.validator(c);\n  }\n\n  registerOnValidatorChange(fn: () => void): void {\n    this.onChange = fn;\n  }\n}\n","import { AbstractControl, ValidationErrors, ValidatorFn, Validators } from '@angular/forms';\nimport { isPresent } from '../util/lang';\n\nexport const lt = (value: number): ValidatorFn => {\n  return (control: AbstractControl): ValidationErrors => {\n    if (!isPresent(value)) {\n      return null;\n    }\n    if (isPresent(Validators.required(control))) {\n      return null;\n    }\n\n    const v: number = +control.value;\n    return v < +value ? null : { lt: { value: value } };\n  };\n};\n","import { Directive, Input, forwardRef, OnInit, OnChanges, SimpleChanges } from '@angular/core';\nimport { NG_VALIDATORS, Validator, ValidatorFn, AbstractControl } from '@angular/forms';\n\nimport { lt } from './validator';\n\nconst LESS_THAN_VALIDATOR: any = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => LessThanValidator),\n  multi: true\n};\n\n@Directive({\n  selector: '[lt][formControlName],[lt][formControl],[lt][ngModel]',\n  providers: [LESS_THAN_VALIDATOR]\n})\nexport class LessThanValidator implements Validator, OnInit, OnChanges {\n  @Input() lt: number;\n\n  private validator: ValidatorFn;\n  private onChange: () => void;\n\n  ngOnInit() {\n    this.validator = lt(this.lt);\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    for (const key in changes) {\n      if (key === 'lt') {\n        this.validator = lt(changes[key].currentValue);\n        if (this.onChange) {\n          this.onChange();\n        }\n      }\n    }\n  }\n\n  validate(c: AbstractControl): {[key: string]: any} {\n    return this.validator(c);\n  }\n\n  registerOnValidatorChange(fn: () => void): void {\n    this.onChange = fn;\n  }\n}\n","import { AbstractControl, FormControl, NgModel, ValidationErrors, ValidatorFn, Validators } from '@angular/forms';\nimport { isDate, isPresent, parseDate } from '../util/lang';\n\nexport const maxDate = (maxInput: any): ValidatorFn => {\n  let value;\n  let subscribe = false;\n  let maxValue = maxInput;\n  const isForm = maxInput instanceof FormControl || maxInput instanceof NgModel;\n  return (control: AbstractControl): ValidationErrors => {\n    if (!subscribe && isForm) {\n      subscribe = true;\n      maxInput.valueChanges.subscribe(() => {\n        control.updateValueAndValidity();\n      });\n    }\n\n    if (isForm) {\n      maxValue = maxInput.value;\n    }\n\n    value = parseDate(maxValue);\n\n    if (!isDate(value) && !(value instanceof Function)) {\n      if (value == null) {\n        return null;\n      } else if (isForm) {\n        return { maxDate: { error: 'maxDate is invalid' } };\n      } else {\n        throw Error('maxDate value must be or return a formatted date');\n      }\n    }\n\n    if (isPresent(Validators.required(control))) {\n      return null;\n    }\n\n    const d = new Date(parseDate(control.value)).getTime();\n\n    if (!isDate(d)) {\n      return { value: true };\n    }\n    if (value instanceof Function) {\n      value = value();\n    }\n\n    return d <= new Date(value).getTime() ? null : (isForm ? { maxDate: { control: maxInput, value: maxInput.value } } : { maxDate: { value: maxValue, control: undefined } });\n  };\n};\n","import { Directive, Input, forwardRef, OnInit, OnChanges, SimpleChanges } from '@angular/core';\nimport { NG_VALIDATORS, Validator, ValidatorFn, AbstractControl } from '@angular/forms';\n\nimport { maxDate } from './validator';\n\nconst MAX_DATE_VALIDATOR: any = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => MaxDateValidator),\n  multi: true\n};\n\n@Directive({\n  selector: '[maxDate][formControlName],[maxDate][formControl],[maxDate][ngModel]',\n  providers: [MAX_DATE_VALIDATOR]\n})\nexport class MaxDateValidator implements Validator, OnInit, OnChanges {\n  @Input() maxDate;\n\n  private validator: ValidatorFn;\n  private onChange: () => void;\n\n  ngOnInit() {\n    this.validator = maxDate(this.maxDate);\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    for (const key in changes) {\n      if (key === 'maxDate') {\n        this.validator = maxDate(changes[key].currentValue);\n        if (this.onChange) {\n          this.onChange();\n        }\n      }\n    }\n  }\n\n  validate(c: AbstractControl): {[key: string]: any} {\n    return this.validator(c);\n  }\n\n  registerOnValidatorChange(fn: () => void): void {\n    this.onChange = fn;\n  }\n}\n","import { AbstractControl, ValidationErrors, ValidatorFn, Validators } from '@angular/forms';\nimport { isPresent } from '../util/lang';\n\nexport const max = (value: number): ValidatorFn => {\n  return (control: AbstractControl): ValidationErrors => {\n    if (!isPresent(value)) {\n      return null;\n    }\n    if (isPresent(Validators.required(control))) {\n      return null;\n    }\n\n    const v: number = +control.value;\n    return v <= +value ? null : { max: { value: value } };\n  };\n};\n","import { Directive, Input, forwardRef, OnInit, OnChanges, SimpleChanges } from '@angular/core';\nimport { NG_VALIDATORS, Validator, ValidatorFn, AbstractControl } from '@angular/forms';\n\nimport { max } from './validator';\n\nconst MAX_VALIDATOR: any = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => MaxValidator),\n  multi: true\n};\n\n@Directive({\n  selector: '[max][formControlName],[max][formControl],[max][ngModel]',\n  providers: [MAX_VALIDATOR]\n})\nexport class MaxValidator implements Validator, OnInit, OnChanges {\n  @Input() max: number;\n\n  private validator: ValidatorFn;\n  private onChange: () => void;\n\n  ngOnInit() {\n    this.validator = max(this.max);\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    for (const key in changes) {\n      if (key === 'max') {\n        this.validator = max(changes[key].currentValue);\n        if (this.onChange) {\n          this.onChange();\n        }\n      }\n    }\n  }\n\n  validate(c: AbstractControl): {[key: string]: any} {\n    return this.validator(c);\n  }\n\n  registerOnValidatorChange(fn: () => void): void {\n    this.onChange = fn;\n  }\n}\n","import { AbstractControl, FormControl, NgModel, ValidationErrors, ValidatorFn, Validators } from '@angular/forms';\nimport { isDate, isPresent, parseDate } from '../util/lang';\n\nexport const minDate = (minInput: any): ValidatorFn => {\n  let value;\n  let subscribe = false;\n  let minValue = minInput;\n  const isForm = minInput instanceof FormControl || minInput instanceof NgModel;\n  return (control: AbstractControl): ValidationErrors => {\n\n    if (!subscribe && isForm) {\n      subscribe = true;\n      minInput.valueChanges.subscribe(() => {\n        control.updateValueAndValidity();\n      });\n    }\n\n    if (isForm) {\n      minValue = minInput.value;\n    }\n\n    value = parseDate(minValue);\n\n    if (!isDate(value) && !(value instanceof Function)) {\n      if (value == null) {\n        return null;\n      } else if (isForm) {\n        return { minDate: { error: 'minDate is invalid' } };\n      } else {\n        throw Error('minDate value must be or return a formatted date');\n      }\n    }\n\n    if (isPresent(Validators.required(control))) {\n      return null;\n    }\n\n    const d = new Date(parseDate(control.value)).getTime();\n\n    if (!isDate(d)) {\n      return { value: true };\n    }\n    if (value instanceof Function) {\n      value = value();\n    }\n\n    return d >= new Date(value).getTime() ? null : (isForm ? { minDate: { control: minInput, value: minInput.value } } : { minDate: { value: minValue, control: undefined } });\n  };\n};\n","import { Directive, Input, forwardRef, OnInit, OnChanges, SimpleChanges } from '@angular/core';\nimport { NG_VALIDATORS, Validator, ValidatorFn, AbstractControl } from '@angular/forms';\n\nimport { minDate } from './validator';\n\nconst MIN_DATE_VALIDATOR: any = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => MinDateValidator),\n  multi: true\n};\n\n@Directive({\n  selector: '[minDate][formControlName],[minDate][formControl],[minDate][ngModel]',\n  providers: [MIN_DATE_VALIDATOR]\n})\nexport class MinDateValidator implements Validator, OnInit, OnChanges {\n  @Input() minDate;\n\n  private validator: ValidatorFn;\n  private onChange: () => void;\n\n  ngOnInit() {\n    this.validator = minDate(this.minDate);\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    for (const key in changes) {\n      if (key === 'minDate') {\n        this.validator = minDate(changes[key].currentValue);\n        if (this.onChange) {\n          this.onChange();\n        }\n      }\n    }\n  }\n\n  validate(c: AbstractControl): {[key: string]: any} {\n    return this.validator(c);\n  }\n\n  registerOnValidatorChange(fn: () => void): void {\n    this.onChange = fn;\n  }\n}\n","import { AbstractControl, ValidationErrors, ValidatorFn, Validators } from '@angular/forms';\nimport { isPresent } from '../util/lang';\n\nexport const min = (value: number): ValidatorFn => {\n  return (control: AbstractControl): ValidationErrors => {\n    if (!isPresent(value)) {\n      return null;\n    }\n    if (isPresent(Validators.required(control))) {\n      return null;\n    }\n\n    const v: number = +control.value;\n    return v >= +value ? null : { min: { value: value } };\n  };\n};\n","import { Directive, Input, forwardRef, OnInit, OnChanges, SimpleChanges } from '@angular/core';\nimport { NG_VALIDATORS, Validator, ValidatorFn, AbstractControl } from '@angular/forms';\n\nimport { min } from './validator';\n\nconst MIN_VALIDATOR: any = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => MinValidator),\n  multi: true\n};\n\n@Directive({\n  selector: '[min][formControlName],[min][formControl],[min][ngModel]',\n  providers: [MIN_VALIDATOR]\n})\nexport class MinValidator implements Validator, OnInit, OnChanges {\n  @Input() min: number;\n\n  private validator: ValidatorFn;\n  private onChange: () => void;\n\n  ngOnInit() {\n    this.validator = min(this.min);\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    for (const key in changes) {\n      if (key === 'min') {\n        this.validator = min(changes[key].currentValue);\n        if (this.onChange) {\n          this.onChange();\n        }\n      }\n    }\n  }\n\n  validate(c: AbstractControl): {[key: string]: any} {\n    return this.validator(c);\n  }\n\n  registerOnValidatorChange(fn: () => void): void {\n    this.onChange = fn;\n  }\n}\n","import { AbstractControl, ValidationErrors, ValidatorFn } from '@angular/forms';\n\nexport const notEqualTo = (notEqualControl: AbstractControl): ValidatorFn => {\n  let subscribe = false;\n  return (control: AbstractControl): ValidationErrors => {\n    if (!subscribe) {\n      subscribe = true;\n      notEqualControl.valueChanges.subscribe(() => {\n        control.updateValueAndValidity();\n      });\n    }\n\n    const v: string = control.value;\n\n    if (notEqualControl.value == null && v == null) {\n      return null;\n    }\n\n    return notEqualControl.value !== v ? null : { notEqualTo: { control: notEqualControl, value: notEqualControl.value } };\n  };\n};\n","import { Directive, Input, forwardRef, OnInit } from '@angular/core';\nimport { NG_VALIDATORS, Validator, FormControl, ValidatorFn, AbstractControl } from '@angular/forms';\n\nimport { notEqualTo } from './validator';\n\nconst NOT_EQUAL_TO_VALIDATOR: any = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => NotEqualToValidator),\n  multi: true\n};\n\n@Directive({\n  selector: '[notEqualTo][formControlName],[notEqualTo][formControl],[notEqualTo][ngModel]',\n  providers: [NOT_EQUAL_TO_VALIDATOR]\n})\nexport class NotEqualToValidator implements Validator, OnInit {\n  @Input() notEqualTo: FormControl;\n\n  private validator: ValidatorFn;\n\n  ngOnInit() {\n    this.validator = notEqualTo(this.notEqualTo);\n  }\n\n  validate(c: AbstractControl): {[key: string]: any} {\n    return this.validator(c);\n  }\n}\n","import { AbstractControl, ValidationErrors, ValidatorFn, Validators } from '@angular/forms';\nimport { isPresent } from '../util/lang';\n\nexport const notEqual = (val: any): ValidatorFn => {\n  return (control: AbstractControl): ValidationErrors => {\n    if (isPresent(Validators.required(control))) {\n      return null;\n    }\n\n    const v: any = control.value;\n\n    return val !== v ? null : { notEqual: { value: val } };\n  };\n};\n","import { Directive, Input, forwardRef, OnInit, SimpleChanges, OnChanges } from '@angular/core';\nimport { NG_VALIDATORS, Validator, ValidatorFn, AbstractControl } from '@angular/forms';\n\nimport { notEqual } from './validator';\n\nconst NOT_EQUAL_VALIDATOR: any = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => NotEqualValidator),\n  multi: true\n};\n\n@Directive({\n  selector: '[notEqual][formControlName],[notEqual][formControl],[notEqual][ngModel]',\n  providers: [NOT_EQUAL_VALIDATOR]\n})\nexport class NotEqualValidator implements Validator, OnInit, OnChanges {\n  @Input() notEqual: any;\n\n  private validator: ValidatorFn;\n  private onChange: () => void;\n\n  ngOnInit() {\n    this.validator = notEqual(this.notEqual);\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    for (const key in changes) {\n      if (key === 'notEqual') {\n        this.validator = notEqual(changes[key].currentValue);\n        if (this.onChange) {\n          this.onChange();\n        }\n      }\n    }\n  }\n\n  validate(c: AbstractControl): {[key: string]: any} {\n    return this.validator(c);\n  }\n\n  registerOnValidatorChange(fn: () => void): void {\n    this.onChange = fn;\n  }\n}\n","import { AbstractControl, ValidationErrors, ValidatorFn, Validators } from '@angular/forms';\nimport { isPresent } from '../util/lang';\n\nexport const number: ValidatorFn = (control: AbstractControl): ValidationErrors => {\n  if (isPresent(Validators.required(control))) {\n    return null;\n  }\n\n  const v: string = control.value;\n  return /^(?:-?\\d+|-?\\d{1,3}(?:,\\d{3})+)?(?:\\.\\d+)?$/.test(v) ? null : { 'number': true };\n};\n","import { Directive, forwardRef } from '@angular/core';\nimport { NG_VALIDATORS, Validator, AbstractControl } from '@angular/forms';\n\nimport { number } from './validator';\n\nconst NUMBER_VALIDATOR: any = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => NumberValidator),\n  multi: true\n};\n\n@Directive({\n  selector: '[number][formControlName],[number][formControl],[number][ngModel]',\n  providers: [NUMBER_VALIDATOR]\n})\nexport class NumberValidator implements Validator {\n  validate(c: AbstractControl): {[key: string]: any} {\n    return number(c);\n  }\n}\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport var __createBinding = Object.create ? (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\r\n}) : (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n});\r\n\r\nexport function __exportStar(m, o) {\r\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(o, p)) __createBinding(o, m, p);\r\n}\r\n\r\nexport function __values(o) {\r\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\r\n    if (m) return m.call(o);\r\n    if (o && typeof o.length === \"number\") return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nvar __setModuleDefault = Object.create ? (function(o, v) {\r\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\r\n}) : function(o, v) {\r\n    o[\"default\"] = v;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\r\n    __setModuleDefault(result, mod);\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n\r\nexport function __classPrivateFieldGet(receiver, privateMap) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to get private field on non-instance\");\r\n    }\r\n    return privateMap.get(receiver);\r\n}\r\n\r\nexport function __classPrivateFieldSet(receiver, privateMap, value) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to set private field on non-instance\");\r\n    }\r\n    privateMap.set(receiver, value);\r\n    return value;\r\n}\r\n","import { AbstractControl, ValidationErrors, ValidatorFn, Validators } from '@angular/forms';\nimport { isPresent } from '../util/lang';\n\nexport const property = (value: string): ValidatorFn => {\n  return (control: AbstractControl): ValidationErrors => {\n\n    if (isPresent(Validators.required(control))) {\n      return null;\n    }\n\n    const properties = value.split(',');\n\n    const obj = control.value;\n    let isValid = true;\n    for (const prop of properties) {\n      if (obj[prop] == null) {\n        isValid = false;\n        break;\n      }\n    }\n    return isValid ? null : { hasProperty: { value: value } };\n  };\n};\n","import { Directive, Input, forwardRef, OnInit, OnChanges, SimpleChanges } from '@angular/core';\nimport { NG_VALIDATORS, Validator, ValidatorFn, AbstractControl } from '@angular/forms';\n\nimport { property } from './validator';\n\nconst PROPERTY_VALIDATOR: any = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => PropertyValidator),\n  multi: true\n};\n\n@Directive({\n  selector: '[property][formControlName],[property][formControl],[property][ngModel]',\n  providers: [PROPERTY_VALIDATOR]\n})\nexport class PropertyValidator implements Validator, OnInit, OnChanges {\n  @Input() property: string;\n\n  private validator: ValidatorFn;\n  private onChange: () => void;\n\n  ngOnInit() {\n    this.validator = property(this.property);\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    for (const key in changes) {\n      if (key === 'property') {\n        this.validator = property(changes[key].currentValue);\n        if (this.onChange) {\n          this.onChange();\n        }\n      }\n    }\n  }\n\n  validate(c: AbstractControl): {[key: string]: any} {\n    return this.validator(c);\n  }\n\n  registerOnValidatorChange(fn: () => void): void {\n    this.onChange = fn;\n  }\n}\n","import { AbstractControl, ValidationErrors, ValidatorFn, Validators } from '@angular/forms';\nimport { isPresent } from '../util/lang';\n\nexport const rangeLength = (value: Array<number>): ValidatorFn => {\n  return (control: AbstractControl): ValidationErrors => {\n    if (!isPresent(value)) {\n      return null;\n    }\n    if (isPresent(Validators.required(control))) {\n      return null;\n    }\n\n    const v: string = control.value;\n    return v.length >= value[0] && v.length <= value[1] ? null : { rangeLength: { value: value } };\n  };\n};\n","import { Directive, Input, forwardRef, OnInit, OnChanges, SimpleChanges } from '@angular/core';\nimport { NG_VALIDATORS, Validator, ValidatorFn, AbstractControl } from '@angular/forms';\n\nimport { rangeLength } from './validator';\n\nconst RANGE_LENGTH_VALIDATOR: any = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => RangeLengthValidator),\n  multi: true\n};\n\n@Directive({\n  selector: '[rangeLength][formControlName],[rangeLength][formControl],[rangeLength][ngModel]',\n  providers: [RANGE_LENGTH_VALIDATOR]\n})\nexport class RangeLengthValidator implements Validator, OnInit, OnChanges {\n  @Input() rangeLength: [number];\n\n  private validator: ValidatorFn;\n  private onChange: () => void;\n\n  ngOnInit() {\n    this.validator = rangeLength(this.rangeLength);\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    for (const key in changes) {\n      if (key === 'rangeLength') {\n        this.validator = rangeLength(changes[key].currentValue);\n        if (this.onChange) {\n          this.onChange();\n        }\n      }\n    }\n  }\n\n  validate(c: AbstractControl): {[key: string]: any} {\n    return this.validator(c);\n  }\n\n  registerOnValidatorChange(fn: () => void): void {\n    this.onChange = fn;\n  }\n}\n","import { AbstractControl, ValidationErrors, ValidatorFn, Validators } from '@angular/forms';\nimport { isPresent } from '../util/lang';\n\nexport const range = (value: Array<number>): ValidatorFn => {\n  return (control: AbstractControl): ValidationErrors => {\n    if (!isPresent(value)) {\n      return null;\n    }\n    if (isPresent(Validators.required(control))) {\n      return null;\n    }\n\n    const v: number = +control.value;\n    return v >= value[0] && v <= value[1] ? null : { range: { value: value } };\n  };\n};\n","import { Directive, Input, forwardRef, OnInit, OnChanges, SimpleChanges } from '@angular/core';\nimport { NG_VALIDATORS, Validator, ValidatorFn, AbstractControl } from '@angular/forms';\n\nimport { range } from './validator';\n\nconst RANGE_VALIDATOR: any = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => RangeValidator),\n  multi: true\n};\n\n@Directive({\n  selector: '[range][formControlName],[range][formControl],[range][ngModel]',\n  providers: [RANGE_VALIDATOR]\n})\nexport class RangeValidator implements Validator, OnInit, OnChanges {\n  @Input() range: [number];\n\n  private validator: ValidatorFn;\n  private onChange: () => void;\n\n  ngOnInit() {\n    this.validator = range(this.range);\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    for (const key in changes) {\n      if (key === 'range') {\n        this.validator = range(changes[key].currentValue);\n        if (this.onChange) {\n          this.onChange();\n        }\n      }\n    }\n  }\n\n  validate(c: AbstractControl): {[key: string]: any} {\n    return this.validator(c);\n  }\n\n  registerOnValidatorChange(fn: () => void): void {\n    this.onChange = fn;\n  }\n}\n","import { AbstractControl, ValidationErrors, ValidatorFn, Validators } from '@angular/forms';\nimport { isPresent } from '../util/lang';\n\nexport const url: ValidatorFn = (control: AbstractControl): ValidationErrors => {\n  if (isPresent(Validators.required(control))) {\n    return null;\n  }\n\n  const v: string = control.value;\n  /* tslint:disable */\n  return /^(?:(?:(?:https?|ftp):)?\\/\\/)(?:\\S+(?::\\S*)?@)?(?:(?!(?:10|127)(?:\\.\\d{1,3}){3})(?!(?:169\\.254|192\\.168)(?:\\.\\d{1,3}){2})(?!172\\.(?:1[6-9]|2\\d|3[0-1])(?:\\.\\d{1,3}){2})(?:[1-9]\\d?|1\\d\\d|2[01]\\d|22[0-3])(?:\\.(?:1?\\d{1,2}|2[0-4]\\d|25[0-5])){2}(?:\\.(?:[1-9]\\d?|1\\d\\d|2[0-4]\\d|25[0-4]))|(?:(?:[a-z\\u00a1-\\uffff0-9]-*)*[a-z\\u00a1-\\uffff0-9]+)(?:\\.(?:[a-z\\u00a1-\\uffff0-9]-*)*[a-z\\u00a1-\\uffff0-9]+)*(?:\\.(?:[a-z\\u00a1-\\uffff]{2,})).?)(?::\\d{2,5})?(?:[/?#]\\S*)?$/i.test(v) ? null : { 'url': true };\n  /* tslint:enable */\n};\n","import { Directive, forwardRef } from '@angular/core';\nimport { NG_VALIDATORS, Validator, AbstractControl } from '@angular/forms';\n\nimport { url } from './validator';\n\nconst URL_VALIDATOR: any = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => UrlValidator),\n  multi: true\n};\n\n@Directive({\n  selector: '[url][formControlName],[url][formControl],[url][ngModel]',\n  providers: [URL_VALIDATOR]\n})\nexport class UrlValidator implements Validator {\n  validate(c: AbstractControl): {[key: string]: any} {\n    return url(c);\n  }\n}\n","import { AbstractControl, ValidationErrors, ValidatorFn, Validators } from '@angular/forms';\nimport { isPresent } from '../util/lang';\n\nconst uuids = {\n  '3': /^[0-9A-F]{8}-[0-9A-F]{4}-3[0-9A-F]{3}-[0-9A-F]{4}-[0-9A-F]{12}$/i,\n  '4': /^[0-9A-F]{8}-[0-9A-F]{4}-4[0-9A-F]{3}-[89AB][0-9A-F]{3}-[0-9A-F]{12}$/i,\n  '5': /^[0-9A-F]{8}-[0-9A-F]{4}-5[0-9A-F]{3}-[89AB][0-9A-F]{3}-[0-9A-F]{12}$/i,\n  'all': /^[0-9A-F]{8}-[0-9A-F]{4}-[0-9A-F]{4}-[0-9A-F]{4}-[0-9A-F]{12}$/i\n};\n\nexport const uuid = (version?: string): ValidatorFn => {\n  return (control: AbstractControl): ValidationErrors => {\n    if (isPresent(Validators.required(control))) {\n      return null;\n    }\n\n    const v: string = control.value;\n    const pattern = uuids[version] || uuids.all;\n\n    return (new RegExp(pattern)).test(v) ? null : { uuid: true };\n  };\n};\n","import { Directive, Input, forwardRef, OnInit, OnChanges, SimpleChanges } from '@angular/core';\nimport { NG_VALIDATORS, Validator, ValidatorFn, AbstractControl } from '@angular/forms';\n\nimport { uuid } from './validator';\n\nconst UUID_VALIDATOR: any = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => UUIDValidator),\n  multi: true\n};\n\n@Directive({\n  selector: '[uuid][formControlName],[uuid][formControl],[uuid][ngModel]',\n  providers: [UUID_VALIDATOR]\n})\nexport class UUIDValidator implements Validator, OnInit, OnChanges {\n  @Input() uuid;\n\n  private validator: ValidatorFn;\n  private onChange: () => void;\n\n  ngOnInit() {\n    this.validator = uuid(this.uuid);\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    for (const key in changes) {\n      if (key === 'uuid') {\n        this.validator = uuid(changes[key].currentValue);\n        if (this.onChange) {\n          this.onChange();\n        }\n      }\n    }\n  }\n\n  validate(c: AbstractControl): {[key: string]: any} {\n    return this.validator(c);\n  }\n\n  registerOnValidatorChange(fn: () => void): void {\n    this.onChange = fn;\n  }\n}\n","import { ArrayLengthValidator } from './array-length/directive';\nimport { arrayLength } from './array-length/validator';\nimport { Base64Validator } from './base64/directive';\nimport { base64 } from './base64/validator';\nimport { CreditCardValidator } from './credit-card/directive';\nimport { creditCard } from './credit-card/validator';\nimport { DateISOValidator } from './date-iso/directive';\nimport { dateISO } from './date-iso/validator';\nimport { DateValidator } from './date/directive';\nimport { date } from './date/validator';\nimport { DigitsValidator } from './digits/directive';\nimport { digits } from './digits/validator';\nimport { EmailValidator } from './email/directive';\nimport { email } from './email/validator';\nimport { EqualToValidator } from './equal-to/directive';\nimport { equalTo } from './equal-to/validator';\nimport { EqualValidator } from './equal/directive';\nimport { equal } from './equal/validator';\nimport { GreaterThanEqualValidator } from './greater-than-equal/directive';\nimport { gte } from './greater-than-equal/validator';\nimport { GreaterThanValidator } from './greater-than/directive';\nimport { gt } from './greater-than/validator';\nimport { JSONValidator } from './json/directive';\nimport { json } from './json/validator';\nimport { LessThanEqualValidator } from './less-than-equal/directive';\nimport { lte } from './less-than-equal/validator';\nimport { LessThanValidator } from './less-than/directive';\nimport { lt } from './less-than/validator';\nimport { MaxDateValidator } from './max-date/directive';\nimport { maxDate } from './max-date/validator';\nimport { MaxValidator } from './max/directive';\nimport { max } from './max/validator';\nimport { MinDateValidator } from './min-date/directive';\nimport { minDate } from './min-date/validator';\nimport { MinValidator } from './min/directive';\nimport { min } from './min/validator';\nimport { NotEqualToValidator } from './not-equal-to/directive';\nimport { notEqualTo } from './not-equal-to/validator';\nimport { NotEqualValidator } from './not-equal/directive';\nimport { notEqual } from './not-equal/validator';\nimport { NumberValidator } from './number/directive';\nimport { number } from './number/validator';\nimport { PropertyValidator } from './property/directive';\nimport { property } from './property/validator';\nimport { RangeLengthValidator } from './range-length/directive';\nimport { rangeLength } from './range-length/validator';\nimport { RangeValidator } from './range/directive';\nimport { range } from './range/validator';\nimport { UrlValidator } from './url/directive';\nimport { url } from './url/validator';\nimport { UUIDValidator } from './uuid/directive';\nimport { uuid } from './uuid/validator';\nimport { NgModule } from '@angular/core';\nimport { AbstractControl, ValidatorFn } from '@angular/forms';\n\nexport const CustomValidators = {\n  arrayLength,\n  base64,\n  creditCard,\n  date,\n  dateISO,\n  digits,\n  email,\n  equal,\n  equalTo,\n  gt,\n  gte,\n  json,\n  lt,\n  lte,\n  max,\n  maxDate,\n  min,\n  minDate,\n  notEqual,\n  notEqualTo,\n  number,\n  property,\n  range,\n  rangeLength,\n  url,\n  uuid\n};\n\nconst CustomDirectives = [\n  ArrayLengthValidator,\n  Base64Validator,\n  CreditCardValidator,\n  DateValidator,\n  DateISOValidator,\n  DigitsValidator,\n  EmailValidator,\n  EqualValidator,\n  EqualToValidator,\n  GreaterThanValidator,\n  GreaterThanEqualValidator,\n  JSONValidator,\n  LessThanValidator,\n  LessThanEqualValidator,\n  MaxValidator,\n  MaxDateValidator,\n  MinValidator,\n  MinDateValidator,\n  NotEqualValidator,\n  NotEqualToValidator,\n  NumberValidator,\n  PropertyValidator,\n  RangeValidator,\n  RangeLengthValidator,\n  UrlValidator,\n  UUIDValidator\n];\n\n@NgModule({\n  declarations: [CustomDirectives],\n  exports: [CustomDirectives]\n})\nexport class CustomFormsModule { }\n"]}